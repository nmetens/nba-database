""" Author: Nathan Metens

	* This file is where all the data and table manipulation happens.
	* Each method loops through large amounts of data and will
	* frequently stall, so updating the index at the proper value
	* is important on re-runs.
"""

from nba_api.stats.endpoints import CommonPlayerInfo, PlayerGameLog, TeamDetails, playercareerstats, PlayerAwards
import nba_api.stats.static.players as p
from nba_api.stats.static import teams
from players import players
import insert as i
import pandas as pd
import json, os

def player_stats(cursor, conn):
	"""
	Takes the cursor and connetion from main.
	
	Loops through the players list from the players module.
	Every player in the players list calls the nba_api to 
	obtain their career stats adds the stats to the playersstats
	table in the database.
	
	Returns the cursor and connection back to main.	

	* This method requires many tries because the nba_api is
	* slow and often stalls. Outputing the player index allows
	* me to update the player index in the list manualy in order
	* to avoid duplicate inserts.
	"""
	index = 16 # Update the index when stall occurs.
	for player in players[index:]:
		player_id = i.get_player_id(player)
		player_stats = playercareerstats.PlayerCareerStats(player_id= player_id)

		df = player_stats.get_data_frames()[0]

		df = df[df['TEAM_ID'] != 0]  # Drop the rows of team_id == 0.

		insert_stmt, data = i.insert(df, 'PlayersStats')

		cursor.executemany(insert_stmt, data)

		print(player_id, "index:", index)

		conn.commit()
		index += 1

	return cursor, conn

def nba_awards(cursor, conn):
	"""
	Gets the cursor and conn from main.

	Get the ids from the PlayerInfo table in the database.
	Then call the PlayerAwards api endpoint to get all the
	awards for that player. Create a dataframe from it,
	replacing all empty strings with null and insert the awards
	data into the Awards table in the database.

	* This method requires many tries because the nba_api is
	* slow and often stalls. Outputing the player index allows
	* me to update the player index in the list manualy in order
	* to avoid duplicate inserts.
	"""
	cursor.execute('select person_id from nba.PlayerInfo;')
	nba_player_ids = cursor.fetchall()

	index = 25 # Update when stall occurs.
	for p_id in nba_player_ids[index:]:
		award = PlayerAwards(player_id=p_id)
		df = award.get_data_frames()[0]
		print(df, 'player_index:', index)

		# Replace empty strings with None (ChatGPT generated line):
		df = df.replace([r'^\s*$', r'(?i)\(null\)', r'(?i)null'], None, regex=True)

		insert_stmt, data = i.insert(df, 'Awards')
		cursor.executemany(insert_stmt, data)

		conn.commit()
		index += 1

	return cursor, conn

def nba_players(cursor, conn):
	"""
	Go through the players list and update the current index
	if the api stalls.
	
	Call the api to get the basic player info for each player and add
	them to the PlayerInfo table in the database.	
	"""	
	index = 19 # change if stall occures
	for player_name in players[index:]:
		player_id = i.get_player_id(player_name)

		player_info = CommonPlayerInfo(player_id=player_id)
		
		# Get the player info the player id and create pandas datafram:
		df = player_info.get_data_frames()[0] # Get all the player data for their career in a dataframe

		print(df, 'index:', index)

		insert_stmt, data = i.insert(df, 'PlayerInfo')

		if insert_stmt and data:
			cursor.executemany(insert_stmt, data) # Many executes since there are multiple rows
		
		conn.commit() # Commit the insert after each player
		index += 1

	return cursor, conn

def nba_seasons(cursor):
	"""
	Insert into the Seasons table all the the years that the nba has
	been in existance. This method was generated by ChatGpt.
	"""
	# Generate season IDs from 1996-97 to 2024-25 (ChatGpt):
	for start_year in range(1996, 2025):
		end_year_short = str(start_year + 1)[-2:]  # get last two digits
		season_id = f"{start_year}-{end_year_short}"

		cursor.execute(
			'insert into nba.Seasons (season_id, start_year, end_year) values (%s, %s, %s);',
			(season_id, start_year, start_year + 1)
		)	

	return cursor

def nba_teams(cursor, conn):
	"""
	Get all the 30 teams data from the nba_api
	and insert their data into the Teams table in 
	the database.
	"""
	# Get all NBA teams
	nba_teams = teams.get_teams()

	# Extract team IDs and names
	team_ids = [(team['id'], team['full_name']) for team in nba_teams]
	
	index = 0 # 0, 16
	for nba_team in team_ids[index:]:
		team = TeamDetails(team_id=nba_team[0])
		team_df = team.get_data_frames()[0]
		print(team_df, 'index:', index)

		insert_stmt, data = i.insert(team_df, 'Teams')
		if insert_stmt and data:
			cursor.executemany(insert_stmt, data)

		index += 1
		conn.commit()
		
	return cursor, conn

def revert_season_id(season_id: str) -> str:
	"""
	Example input: 22024
	Example output: 2024-25
	"""
	szn_id = (season_id[1:]) # 2024
	end_year = str(int(szn_id[2:]) + 1) # 24 + 1 = 25
	return szn_id + '-' + end_year # 2024-25

def player_game_log(cursor, conn):
	"""
	Loop through the players list and call the api
	to get that player's games data for the 2024-25 season.
	"""
	index = 29 # Update after stall.
	for player in players[index:]:	
		player_id = i.get_player_id(player)

		season_id = '2024-25'
		gamelog = PlayerGameLog(player_id=player_id, season=season_id)
		df = gamelog.get_data_frames()[0]

		# Replace 'SEASON_ID' in the dataframe to match your DB format
		# All season_id's in the df are '22024'. Revert to '2024-25':
		df['SEASON_ID'] = df['SEASON_ID'].apply(revert_season_id)
		
		insert_stmt, data = i.insert(df, 'PlayerGameLogs')
		cursor.executemany(insert_stmt, data)
		print(df, "index:", index)

		conn.commit()
		index += 1

	return cursor, conn
